---
const { description, images } = Astro.props;
---

<my-header class="flex flex-col sm:flex-row items-center mb-8 mt-4 justify-center">
  <div class="flex flex-col items-center">
    <img
      src={images[0]}
      class="w-[256px] sm:w-[400px] mb-4 sm:mb-0 sm:mr-4 cursor-pointer"
      id="post-image"
    />
    {
      images.length > 1 && (
        <div class="flex justify-center">
          {images.map((image: string, i: number) => {
            let imgClass = "w-[65px] sm:w-[80px] cursor-pointer mr-4";
            if (i === 0) {
              imgClass += " selected-image";
            }
            return <img id={"post-image-" + i} src={image} class={imgClass} />;
          })}
        </div>
      )
    }
  </div>
  <!-- <p class="font-bold text-center sm:text-left">
    {description}
  </p> -->
</my-header>

<div
  id="modal"
  class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50 hidden opacity-0 transition-opacity duration-300"
>
  <img src={images[0]} class="max-w-full max-h-full" id="modal-image" />
</div>

<style>
  .cursor-pointer {
    cursor: pointer;
  }
  .hidden {
    display: none;
  }
  .fade-in {
    opacity: 1;
  }
  .selected-image {
    padding: 5px;
    border-radius: 6px;
    border-width: 0.55px;
    border-style: solid;
    border-color: rgb(0, 130, 230);
  }
</style>

<script>
  class MyHeader extends HTMLElement {
    selectedImageIndex: number = 0;
    postImage: HTMLImageElement | null = null;
    modal: HTMLElement | null = null;
    modalImage: HTMLImageElement | null = null;
    images: NodeListOf<HTMLImageElement> | null = null;

    selectImage(index: number) {
      let selectedImageSrc = "";
      this.images!.forEach((img, i) => {
        if (i === index) {
          selectedImageSrc = img.src;
          img.classList.add("selected-image");
        } else {
          img.classList.remove("selected-image");
        }
      });

      this.modalImage!.src = selectedImageSrc;
      this.postImage!.src = selectedImageSrc;
      this.selectedImageIndex = index;
    }

    connectedCallback() {
      this.postImage = this.querySelector("#post-image");
      this.modal = document.getElementById("modal");
      this.modalImage = document.getElementById(
        "modal-image",
      ) as HTMLImageElement;
      this.images = this.querySelectorAll('img[id^="post-image-"]');
      this.images.forEach((img, i) => {
        img.addEventListener("click", () => {
          this.selectImage(i);
        });
      });

      if (!this.postImage || !this.modalImage || !this.modal) {
        return;
      }

      this.postImage.addEventListener("click", () => {
        this.modal!.classList.remove("hidden");
        setTimeout(() => {
          this.modal!.classList.add("fade-in");
        }, 10);
      });

      const hideModal = () => {
        this.modal!.classList.remove("fade-in");
        setTimeout(() => {
          this.modal!.classList.add("hidden");
        }, 300);
      };

      this.modal.addEventListener("click", hideModal);
      this.modal.addEventListener("touchstart", hideModal);
    }
  }

  customElements.define("my-header", MyHeader);
</script>
